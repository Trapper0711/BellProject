

private void DiffVelo()
{
    Vector2[,] velo = leiteAb(forc);

    for (int x = 0; x < size.x; x++)
    {
        for (int y = 0; y < size.y; y++)
        {
            forc[x, y] += velo[x, y] * diffspeed;
        }
    }

    for (int x = 1; x < size.x - 1; x++)
    {
        forc[x, 1] += new Vector2(1 * forc[x, 0].x, -1 * forc[x, 0].y);
        forc[x, size.y - 2] += new Vector2(1 * forc[x, size.y - 1].x, -1 * forc[x, size.y - 1].y);
        forc[x, 0] = new Vector2();
        forc[x, size.y - 1] = new Vector2();
    }
    for (int y = 1; y < size.y - 1; y++)
    {
        forc[1, y] += new Vector2(-1 * forc[0, y].x, 1 * forc[0, y].y);
        forc[size.x - 2, y] += new Vector2(-1 * forc[size.x - 1, y].x, 1 * forc[size.x - 1, y].y);
        forc[0, y] = new Vector2();
        forc[size.x - 1, y] = new Vector2();
    }

}

private void Diffpress()
{
    Vector2[,] localpressure = new Vector2[size.x, size.y];
    for (int x = 0; x < size.x; x++)
    {
        for (int y = 0; y < size.y; y++)
        {
            localpressure[x, y] = new Vector2(pressure[x, y], 0);
        }
    }
    localpressure = leiteAb(localpressure);
    for (int x = 0; x < size.x; x++)
    {
        for (int y = 0; y < size.y; y++)
        {
            pressure[x, y] += localpressure[x, y].x * diffspeed;
        }
    }

    for (int x = 1; x < size.x - 1; x++)
    {
        pressure[x, 1] += pressure[x, 0];
        pressure[x, size.y - 2] += pressure[x, size.y - 1];
        pressure[x, 0] = 0;
        pressure[x, size.y - 1] = 0;
    }
    for (int y = 1; y < size.y - 1; y++)
    {
        pressure[1, y] += pressure[0, y];
        pressure[size.x - 2, y] += pressure[size.x - 1, y];
        pressure[0, y] = 0;
        pressure[size.x - 1, y] = 0;
    }
}

Vector2[,] leiteAb(Vector2[,] inputdat)
{
    Vector2[,] localSecondAbl = new Vector2[size.x, size.y];
    Vector2[,] ableitungInX = new Vector2[size.x - 1, size.y];
    Vector2[,] ableitungInY = new Vector2[size.x, size.y - 1];
    for (int x = 0; x < size.x - 1; x++)
    {
        for (int y = 0; y < size.y; y++)
        {
            ableitungInX[x, y] = inputdat[x + 1, y] - inputdat[x, y];
        }
    }
    for (int x = 0; x < size.x; x++)
    {
        for (int y = 0; y < size.y - 1; y++)
        {
            ableitungInY[x, y] = inputdat[x, y + 1] - inputdat[x, y];
        }
    }
    for (int x = 0; x < size.x; x++)
    {
        for (int y = 0; y < size.y; y++)
        {
            if (x > 0 && y > 0 && x < size.x - 1 && y < size.y - 1)
            {
                localSecondAbl[x, y] += ableitungInX[x, y] - ableitungInX[x - 1, y];
                localSecondAbl[x, y] += ableitungInY[x, y] - ableitungInY[x, y - 1];
            }
            else if (x == 0 && y == 0)
            {
                localSecondAbl[x, y] += ableitungInX[0, 0];
                localSecondAbl[x, y] += ableitungInY[0, 0];
            }
            else if (x == 0 && y == size.y - 1)
            {
                localSecondAbl[x, y] += ableitungInX[0, size.y - 1];
                localSecondAbl[x, y] -= ableitungInY[0, size.y - 2];
            }
            else if (x == size.x - 1 && y == 0)
            {
                localSecondAbl[x, y] -= ableitungInX[size.x - 2, 0];
                localSecondAbl[x, y] += ableitungInY[size.x - 1, 0];
            }
            else if (x == size.x - 1 && y == size.y - 1)
            {
                localSecondAbl[x, y] -= ableitungInX[size.x - 2, size.y - 1];
                localSecondAbl[x, y] -= ableitungInY[size.x - 1, size.y - 2];
            }
            else if (x == 0)
            {
                localSecondAbl[x, y] += ableitungInY[x, y] - ableitungInY[x, y - 1];
                localSecondAbl[x, y] += ableitungInX[0, y];
            }
            else if (x == size.x - 1)
            {
                localSecondAbl[x, y] += ableitungInY[x, y] - ableitungInY[x, y - 1];
                localSecondAbl[x, y] -= ableitungInX[x - 1, y];
            }
            else if (y == 0)
            {
                localSecondAbl[x, y] += ableitungInX[x, y] - ableitungInX[x - 1, y];
                localSecondAbl[x, y] += ableitungInY[x, y];
            }
            else if (y == size.y - 1)
            {
                localSecondAbl[x, y] += ableitungInX[x, y] - ableitungInX[x - 1, y];
                localSecondAbl[x, y] -= ableitungInY[x, y - 1];
            }
        }
    }
    return localSecondAbl;
}
